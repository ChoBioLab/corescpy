[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "corescpy"
version = "0.0.1"
description = "CRISPR analysis (standardized workflow)."
readme = "README.md"
requires-python = ">=3.9"
license = {file = "LICENSE"}
authors = [
    {name = "Elizabeth Aslinger"}
]
maintainers = [
    {name = "Elizabeth Aslinger", email = "elizabeth.aslinger@aya.yale.edu"},
]
urls.Documentation = "https://github.com/easlinger/corescpy/README.md"
urls.Source = "https://github.com/easlinger/corescpy"
urls.Home-page = "https://github.com/easlinger/corescpy"
dependencies = [
    # Base
    "anndata>=0.7.4",
    # "anndata==0.10.7",  # just to have newest
    # "scanpy[leiden]>=1.9.8",
    # "scanpy[leiden]>=1.10.1",  # so sc.tl.leiden parameters -> key_added
    "scanpy>=1.10.1",  # so sc.tl.leiden parameters -> key_added
    "muon",
    "celltypist",
    "requests",
    # "setuptools<60.0.0",  # stlearn/numba compatibility?

    # GSEA
    "blitzgsea",

    # Perturbations/Conditions
    "pertpy>=0.7.0",  # just to have most recent
    # "pertpy>=0.6.0",
    "ete3",
    "PyQt5",
    "harmonypy",
    "pydeseq2",
    "decoupler",
    "liana>=1.0.4",
    "corneto",
    "graphviz",
    "cvxpy",
    "cylp",
    # "arviz==0.12.1",  # later versions need setuptools>60; breaks stlearn/np
    "arviz",

    # Spatial
    "squidpy>=1.4.0",
    # "spatialdata[extra]>=0.0.15",
    # "spatialdata_io>=0.0.9",
    "spatialdata>=0.1.2",
    "spatialdata_io>=0.1.2",
    "spatialdata-plot",
    "tifffile",
    "cellpose",
    "napari[pyqt5]; platform_system != 'Windows'",
    "napari[pyside2]; platform_system == 'Windows'",
    # "napari-spatialdata[extra]",
    "napari-spatialdata",
    "tangram-sc",
    # "bento-tools",
    # "stlearn",

    # Other
    "dask==2023.11.0",
    "distributed==2023.11.0",
    "docutils < 0.17,>= 0.10",
    "numpy >=1.24.4",
    # "numpy<=1.24.3,>=1.22",
    # "numpy>=1.26.0",  # had to relax for stlearn/numba compatibility
    "pandas>=2.0.0",
    "jax==0.4.20",
    "jaxlib==0.4.20",
    "optax==0.1.7",
    "chex==0.1.86",
    "seaborn>=0.13.0",
    "typing-extensions>=4.8.0",
    "scipy==1.11.4",
    "rich",
    "requests",
    "ipywidgets",
    "switchlang",
    "scikit-misc",
    # "plotnine",
    "scvi-tools",
    "adjusttext",
    "toytree",
    "numpyro",
    "statannotations",
    "ott-jax",
    "sparsecca",
    # "numba<=0.57.1",  # stlearn compatibility
    "numba==0.57.1",  # stlearn compatibility
    "remotezip",
    "openpyxl",
    "pyarrow>=16.0.0"
]

[project.optional-dependencies]
coda = [
    "ete3",
    "pyqt5"
]
gpu = [
    # "dask==2023.11.0",
    # "dask[complete]",
    # "rapids-dask-dependency==23.12.*",
    # "scanpy[rapids]",
    # "rapids-singlecell",
    # "cudf-cu12==23.12.0",
    # "cupy-cuda11x>=12.0.0",
    # "dask-cudf-cu12==23.12.*",
    # "cuml-cu12==23.12.*",
    # "cugraph-cu12==23.12.*"
]
dev = [
    "pre-commit",
]
doc = [
    "docutils>=0.8,!=0.18.*,!=0.19.*",
    "sphinx>=4",
    "furo",
    "myst-nb",
    "myst-parser",
    "sphinxcontrib-bibtex>=1.0.0",
    "sphinx-gallery",
    "sphinx-autodoc-typehints",
    "sphinx-copybutton",
    "sphinx-remove-toctrees",
    "sphinx-design",
    "sphinx-last-updated-by-git",
    "sphinx-automodapi",
    "sphinxext-opengraph",
    "pygments",
    "pyenchant",
    "nbsphinx",
    "nbsphinx-link",
    "ipykernel",
    "ipython",
]
test = [
    "pytest",
    "pytest-cov",
]

# [tool.dependencies]
# pydeseq2 = {path = "../pydeseq2"}

[tool.hatch.version]
source = "vcs"

[tool.coverage.run]
source = ["corescpy"]
omit = [
    "**/test_*.py",
]

[tool.pytest.ini_options]
testpaths = "corescpy/tests"
xfail_strict = true
addopts = [
    "--import-mode=importlib",  # allow using test files with same name
]
markers = [
    "conda: marks a subset of tests to be ran on the Bioconda CI.",
    "extra: marks tests that require extra dependencies."
]
minversion = 6.0
norecursedirs = [ '.*', 'build', 'dist', '*.egg', 'data', '__pycache__']

[tool.black]
line-length = 120

[tool.ruff]
src = ["src"]
line-length = 120
select = [
    "F",  # Errors detected by Pyflakes
    "E",  # Error detected by Pycodestyle
    "W",  # Warning detected by Pycodestyle
    "I",  # isort
    #"D",  # pydocstyle
    "B",  # flake8-bugbear
    "TID",  # flake8-tidy-imports
    "C4",  # flake8-comprehensions
    "BLE",  # flake8-blind-except
    "UP",  # pyupgrade
    "RUF100",  # Report unused noqa directives
]
ignore = [
    # line too long -> we accept long comment lines; black gets rid of long code lines
    "E501",
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # Missing docstring in __init__
    "D107",
    # first line should end with a period [Bug: doesn't work with single-line docstrings]
    "D400",
    # First line should be in imperative mood; try rephrasing
    # "D401",
    ## Disable one in each pair of mutually incompatible rules
    # We donâ€™t want a blank line before a class docstring
    "D203"
]
